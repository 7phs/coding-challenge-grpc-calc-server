// Code generated by protoc-gen-go. DO NOT EDIT.
// source: calc.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Value struct {
	Value                uint64   `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Value) Reset()         { *m = Value{} }
func (m *Value) String() string { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()    {}
func (*Value) Descriptor() ([]byte, []int) {
	return fileDescriptor_calc_cac832638ee2119c, []int{0}
}
func (m *Value) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Value.Unmarshal(m, b)
}
func (m *Value) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Value.Marshal(b, m, deterministic)
}
func (dst *Value) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Value.Merge(dst, src)
}
func (m *Value) XXX_Size() int {
	return xxx_messageInfo_Value.Size(m)
}
func (m *Value) XXX_DiscardUnknown() {
	xxx_messageInfo_Value.DiscardUnknown(m)
}

var xxx_messageInfo_Value proto.InternalMessageInfo

func (m *Value) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Values struct {
	Values               []int64  `protobuf:"varint,1,rep,packed,name=values" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Values) Reset()         { *m = Values{} }
func (m *Values) String() string { return proto.CompactTextString(m) }
func (*Values) ProtoMessage()    {}
func (*Values) Descriptor() ([]byte, []int) {
	return fileDescriptor_calc_cac832638ee2119c, []int{1}
}
func (m *Values) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Values.Unmarshal(m, b)
}
func (m *Values) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Values.Marshal(b, m, deterministic)
}
func (dst *Values) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Values.Merge(dst, src)
}
func (m *Values) XXX_Size() int {
	return xxx_messageInfo_Values.Size(m)
}
func (m *Values) XXX_DiscardUnknown() {
	xxx_messageInfo_Values.DiscardUnknown(m)
}

var xxx_messageInfo_Values proto.InternalMessageInfo

func (m *Values) GetValues() []int64 {
	if m != nil {
		return m.Values
	}
	return nil
}

type Result struct {
	Value                int64    `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_calc_cac832638ee2119c, []int{2}
}
func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (dst *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(dst, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type ResultDouble struct {
	Value                float64  `protobuf:"fixed64,1,opt,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResultDouble) Reset()         { *m = ResultDouble{} }
func (m *ResultDouble) String() string { return proto.CompactTextString(m) }
func (*ResultDouble) ProtoMessage()    {}
func (*ResultDouble) Descriptor() ([]byte, []int) {
	return fileDescriptor_calc_cac832638ee2119c, []int{3}
}
func (m *ResultDouble) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResultDouble.Unmarshal(m, b)
}
func (m *ResultDouble) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResultDouble.Marshal(b, m, deterministic)
}
func (dst *ResultDouble) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResultDouble.Merge(dst, src)
}
func (m *ResultDouble) XXX_Size() int {
	return xxx_messageInfo_ResultDouble.Size(m)
}
func (m *ResultDouble) XXX_DiscardUnknown() {
	xxx_messageInfo_ResultDouble.DiscardUnknown(m)
}

var xxx_messageInfo_ResultDouble proto.InternalMessageInfo

func (m *ResultDouble) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterType((*Value)(nil), "api.Value")
	proto.RegisterType((*Values)(nil), "api.Values")
	proto.RegisterType((*Result)(nil), "api.Result")
	proto.RegisterType((*ResultDouble)(nil), "api.ResultDouble")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CalcClient is the client API for Calc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CalcClient interface {
	Add(ctx context.Context, in *Values, opts ...grpc.CallOption) (*Result, error)
	Sub(ctx context.Context, in *Values, opts ...grpc.CallOption) (*Result, error)
	Mul(ctx context.Context, in *Values, opts ...grpc.CallOption) (*Result, error)
	Div(ctx context.Context, in *Values, opts ...grpc.CallOption) (*ResultDouble, error)
	Fib(ctx context.Context, in *Value, opts ...grpc.CallOption) (*Result, error)
}

type calcClient struct {
	cc *grpc.ClientConn
}

func NewCalcClient(cc *grpc.ClientConn) CalcClient {
	return &calcClient{cc}
}

func (c *calcClient) Add(ctx context.Context, in *Values, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/api.Calc/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calcClient) Sub(ctx context.Context, in *Values, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/api.Calc/Sub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calcClient) Mul(ctx context.Context, in *Values, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/api.Calc/Mul", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calcClient) Div(ctx context.Context, in *Values, opts ...grpc.CallOption) (*ResultDouble, error) {
	out := new(ResultDouble)
	err := c.cc.Invoke(ctx, "/api.Calc/Div", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calcClient) Fib(ctx context.Context, in *Value, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/api.Calc/Fib", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalcServer is the server API for Calc service.
type CalcServer interface {
	Add(context.Context, *Values) (*Result, error)
	Sub(context.Context, *Values) (*Result, error)
	Mul(context.Context, *Values) (*Result, error)
	Div(context.Context, *Values) (*ResultDouble, error)
	Fib(context.Context, *Value) (*Result, error)
}

func RegisterCalcServer(s *grpc.Server, srv CalcServer) {
	s.RegisterService(&_Calc_serviceDesc, srv)
}

func _Calc_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Values)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalcServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Calc/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalcServer).Add(ctx, req.(*Values))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calc_Sub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Values)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalcServer).Sub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Calc/Sub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalcServer).Sub(ctx, req.(*Values))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calc_Mul_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Values)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalcServer).Mul(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Calc/Mul",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalcServer).Mul(ctx, req.(*Values))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calc_Div_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Values)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalcServer).Div(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Calc/Div",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalcServer).Div(ctx, req.(*Values))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calc_Fib_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalcServer).Fib(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Calc/Fib",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalcServer).Fib(ctx, req.(*Value))
	}
	return interceptor(ctx, in, info, handler)
}

var _Calc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Calc",
	HandlerType: (*CalcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Calc_Add_Handler,
		},
		{
			MethodName: "Sub",
			Handler:    _Calc_Sub_Handler,
		},
		{
			MethodName: "Mul",
			Handler:    _Calc_Mul_Handler,
		},
		{
			MethodName: "Div",
			Handler:    _Calc_Div_Handler,
		},
		{
			MethodName: "Fib",
			Handler:    _Calc_Fib_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calc.proto",
}

func init() { proto.RegisterFile("calc.proto", fileDescriptor_calc_cac832638ee2119c) }

var fileDescriptor_calc_cac832638ee2119c = []byte{
	// 193 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x4e, 0xcc, 0x49,
	0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e, 0x2c, 0xc8, 0x54, 0x92, 0xe5, 0x62, 0x0d,
	0x4b, 0xcc, 0x29, 0x4d, 0x15, 0x12, 0xe1, 0x62, 0x2d, 0x03, 0x31, 0x24, 0x18, 0x15, 0x18, 0x35,
	0x58, 0x82, 0x20, 0x1c, 0x25, 0x05, 0x2e, 0x36, 0xb0, 0x74, 0xb1, 0x90, 0x18, 0x17, 0x1b, 0x58,
	0xa8, 0x58, 0x82, 0x51, 0x81, 0x59, 0x83, 0x39, 0x08, 0xca, 0x53, 0x92, 0xe3, 0x62, 0x0b, 0x4a,
	0x2d, 0x2e, 0xcd, 0x29, 0x41, 0x35, 0x81, 0x19, 0x66, 0x82, 0x0a, 0x17, 0x0f, 0x44, 0xde, 0x25,
	0xbf, 0x34, 0x29, 0x07, 0xcd, 0x1e, 0x46, 0xa8, 0x2a, 0xa3, 0x0d, 0x8c, 0x5c, 0x2c, 0xce, 0x89,
	0x39, 0xc9, 0x42, 0xf2, 0x5c, 0xcc, 0x8e, 0x29, 0x29, 0x42, 0xdc, 0x7a, 0x89, 0x05, 0x99, 0x7a,
	0x10, 0xab, 0xa5, 0x20, 0x1c, 0xa8, 0x2d, 0xf2, 0x5c, 0xcc, 0xc1, 0xa5, 0x49, 0xf8, 0x15, 0xf8,
	0x96, 0xe6, 0xe0, 0x51, 0xa0, 0xca, 0xc5, 0xec, 0x92, 0x59, 0x86, 0xaa, 0x40, 0x10, 0x49, 0x01,
	0xd4, 0xa1, 0x72, 0x5c, 0xcc, 0x6e, 0x99, 0x49, 0x42, 0x5c, 0x08, 0x65, 0x28, 0xc6, 0x24, 0xb1,
	0x81, 0x43, 0xd1, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xc4, 0xc5, 0xb9, 0xea, 0x53, 0x01, 0x00,
	0x00,
}
